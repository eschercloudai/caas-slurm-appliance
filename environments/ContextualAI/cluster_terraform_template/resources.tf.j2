#####
##### The identity scope we are operating in
##### Used to output the OpenStack project ID as a fact for provisioned hosts
#####
data "openstack_identity_auth_scope_v3" "scope" {
  name = "{{ cluster_name }}"
}

#####
##### Security groups for the cluster
#####

# Security group to hold common rules for the cluster
resource "openstack_networking_secgroup_v2" "secgroup_slurm_cluster" {
  name                 = "{{ cluster_name }}-secgroup-slurm-cluster"
  description          = "Rules for the slurm cluster nodes"
  delete_default_rules = true   # Fully manage with terraform
}

# Security group to hold specific rules for the login node
resource "openstack_networking_secgroup_v2" "secgroup_slurm_login" {
  name                 = "{{ cluster_name }}-secgroup-slurm-login"
  description          = "Specific rules for the slurm login node"
  delete_default_rules = true   # Fully manage with terraform
}

## Allow all egress for all cluster nodes
resource "openstack_networking_secgroup_rule_v2" "secgroup_slurm_cluster_rule_egress_v4" {
  direction         = "egress"
  ethertype         = "IPv4"
  security_group_id = "${openstack_networking_secgroup_v2.secgroup_slurm_cluster.id}"
}

## Allow all ingress between nodes in the cluster
resource "openstack_networking_secgroup_rule_v2" "secgroup_slurm_cluster_rule_ingress_internal_v4" {
  direction         = "ingress"
  ethertype         = "IPv4"
  remote_group_id   = "${openstack_networking_secgroup_v2.secgroup_slurm_cluster.id}"
  security_group_id = "${openstack_networking_secgroup_v2.secgroup_slurm_cluster.id}"
}

## Allow ingress on port 22 (SSH) from anywhere for the login nodes
resource "openstack_networking_secgroup_rule_v2" "secgroup_slurm_login_rule_ingress_ssh_v4" {
  direction = "ingress"
  ethertype = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  security_group_id = "${openstack_networking_secgroup_v2.secgroup_slurm_login.id}"
}

## Allow ingress on port 443 (HTTPS) from anywhere for the login nodes
resource "openstack_networking_secgroup_rule_v2" "secgroup_slurm_login_rule_ingress_https_v4" {
  direction = "ingress"
  ethertype = "IPv4"
  protocol          = "tcp"
  port_range_min    = 443
  port_range_max    = 443
  security_group_id = "${openstack_networking_secgroup_v2.secgroup_slurm_login.id}"
}

## Allow ingress on port 80 (HTTP) from anywhere for the login nodes
resource "openstack_networking_secgroup_rule_v2" "secgroup_slurm_login_rule_ingress_http_v4" {
  direction = "ingress"
  ethertype = "IPv4"
  protocol          = "tcp"
  port_range_min    = 80
  port_range_max    = 80
  security_group_id = "${openstack_networking_secgroup_v2.secgroup_slurm_login.id}"
}

#####
##### Volumes
#####
resource "openstack_blockstorage_volume_v3" "state" {
    name = "{{ cluster_name }}-state"
    description = "State for control node"
    size = "{{ state_volume_size }}"
}

resource "openstack_blockstorage_volume_v3" "home" {
    name = "{{ cluster_name }}-home"
    description = "Home for control node"
    size = "{{ home_volume_size }}"
    {% if use_home_volume_type_fast is defined and use_home_volume_type_fast %}
    {% if home_volume_type_fast is defined %}
    volume_type = "{{ home_volume_type_fast }}"
    {% endif %}
    {% endif %}
}

#####
###### Cluster network
######

data "openstack_networking_network_v2" "cluster_external_network" {
  name = "{{ cluster_external_network }}"
}

resource "openstack_networking_network_v2" "cluster_network" {
  name           = "{{ cluster_name }}-net"
  admin_state_up = "true"
}

resource "openstack_networking_subnet_v2" "cluster_subnet" {
  name       = "{{ cluster_name }}-subnet"
  network_id = "${openstack_networking_network_v2.cluster_network.id}"
  cidr       = "{{ cluster_cidr }}"
  {% if cluster_nameservers %}
  dns_nameservers = [
  {% for nameserver in cluster_nameservers %}
    "{{ nameserver }}"{{ ',' if not loop.last }}
  {% endfor %}
  ]
  {% endif %}
  ip_version = 4
}

resource "openstack_networking_router_v2" "cluster_router" {
  name                = "{{ cluster_name }}-router"
  admin_state_up      = true
  external_network_id = "${data.openstack_networking_network_v2.cluster_external_network.id}"
}

resource "openstack_networking_router_interface_v2" "cluster_router_interface" {
  router_id = "${openstack_networking_router_v2.cluster_router.id}"
  subnet_id = "${openstack_networking_subnet_v2.cluster_subnet.id}"
}

#####
###### Cluster private key
######

resource "openstack_compute_keypair_v2" "cluster_keypair" {
  name = "{{ cluster_name }}-deploy-key"
}

#####
##### Cluster nodes
#####

{# build list of all ssh keys we need to inject  #}
{% set auth_keys_list = ["\"${openstack_compute_keypair_v2.cluster_keypair.public_key}\""] + cluster_user_ssh_public_keys | default([cluster_user_ssh_public_key]) %}

resource "openstack_compute_instance_v2" "login" {
  name      = "{{ cluster_name }}-login-0"
  image_id  = "{{ cluster_previous_image | default(cluster_image) }}"
  {% if login_flavor_name is defined %}
  flavor_name = "{{ login_flavor_name }}"
  {% else %}
  flavor_id = "{{ login_flavor }}"
  {% endif %}

  network {
    uuid = "${openstack_networking_subnet_v2.cluster_subnet.network_id}"
  }

  security_groups = [
    "${openstack_networking_secgroup_v2.secgroup_slurm_cluster.name}",
    "${openstack_networking_secgroup_v2.secgroup_slurm_login.name}"
  ]
  # Use cloud-init to inject the SSH keys
  user_data = <<-EOF
    #cloud-config
    ssh_authorized_keys:
      - {{ auth_keys_list | join("\n      - ")}}{# don't fix this with to_nice_yaml it will break as it will add extra single quotes around the double quoted TF vars #}
    
  EOF
}

resource "openstack_compute_instance_v2" "control" {
  name      = "{{ cluster_name }}-control-0"
  image_id  = "{{ cluster_previous_image | default(cluster_image) }}"
  {% if control_flavor_name is defined %}
  flavor_name = "{{ control_flavor_name }}"
  {% else %}
  flavor_id = "{{ control_flavor }}"
  {% endif %}

  network {
    uuid = "${openstack_networking_subnet_v2.cluster_subnet.network_id}"
  }

  security_groups = ["${openstack_networking_secgroup_v2.secgroup_slurm_cluster.name}"]

  # root device:
  block_device {
      uuid = "{{ cluster_previous_image | default(cluster_image) }}"
      source_type  = "image"
      destination_type = "local"
      boot_index = 0
      delete_on_termination = true
  }

  # state volume:
  block_device {
      destination_type = "volume"
      source_type  = "volume"
      boot_index = -1
      uuid = openstack_blockstorage_volume_v3.state.id
  }

  # home volume:
  block_device {
      destination_type = "volume"
      source_type  = "volume"
      boot_index = -1
      uuid = openstack_blockstorage_volume_v3.home.id
  }

  # Use cloud-init to a) inject SSH keys b) configure volumes
  user_data = <<-EOF
    #cloud-config
    ssh_authorized_keys:
      - {{ auth_keys_list | join("\n      - ")}}{# don't fix this with to_nice_yaml it will break as it will add extra single quotes around the double quoted TF vars #}
    
    fs_setup:
      - label: state
        filesystem: ext4
        device: /dev/{{ block_device_prefix }}b
        partition: auto
      - label: home
        filesystem: ext4
        device: /dev/{{ block_device_prefix }}c
        partition: auto
    mounts:
        - [LABEL=state, /var/lib/state, auto, "x-systemd.required-by=nfs-server.service,x-systemd.before=nfs-server.service"]
        - [LABEL=home, /exports/home, auto, "x-systemd.required-by=nfs-server.service,x-systemd.before=nfs-server.service"]
  EOF
}

{% for partition in openhpc_slurm_partitions %} 
resource "openstack_compute_instance_v2" "{{ partition.name }}" {
  count = {{ partition.count }}

  name      = "{{ cluster_name }}-compute-{{ partition.name }}-${count.index}"
  image_id  = "{{ cluster_previous_image | default(cluster_image) }}"
  flavor_name = "{{ partition.flavor_name }}"

  network {
    uuid = "${openstack_networking_subnet_v2.cluster_subnet.network_id}"
  }

  security_groups = ["${openstack_networking_secgroup_v2.secgroup_slurm_cluster.name}"]
  # Use cloud-init to inject the SSH keys
  user_data = <<-EOF
    #cloud-config
    ssh_authorized_keys:
      - {{ auth_keys_list | join("\n      - ")}}{# don't fix this with to_nice_yaml it will break as it will add extra single quotes around the double quoted TF vars #}
    
  EOF
}
{% endfor %}
#####
##### Floating IP association for login node
#####
data "openstack_networking_subnet_ids_v2" "ext_subnets" {
  network_id = "${data.openstack_networking_network_v2.cluster_external_network.id}"
}

resource "openstack_networking_floatingip_v2" "cluster_floating_ip" {
  pool       = "${data.openstack_networking_network_v2.cluster_external_network.name}"
  subnet_ids = "${data.openstack_networking_subnet_ids_v2.ext_subnets.ids}"
}

resource "openstack_compute_floatingip_associate_v2" "login_floatingip_assoc" {
  floating_ip = "${openstack_networking_floatingip_v2.cluster_floating_ip.address}"
  instance_id = "${openstack_compute_instance_v2.login.id}"
}

